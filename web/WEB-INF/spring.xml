<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 引入数据库的properties配置文件，当需要引入多个properties文件时，在list中配置更多的value即可实现 -->
    <bean id="propertyConfigure" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:com/uniplore/graph/ms/properties/db.properties</value> 
            </list>
        </property>
    </bean>
    
    <!--
        引入数据源，可以使用spring框架自带的jdbc支持，当然也可以选择使用c3p0、DBCP、Druid(阿里巴巴开源数据库连接池技术) 
        经过选择之后将数据库连接池换成Druid，性能最好
        
        下面部分采用的是DBCH连接池技术实例
        <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="$mysql.driver}" />
            <property name="url" value="${mysql.url}" />
            <property name="username" value="${mysql.username}" />
            <property name="password" value="${mysql.password}" />
        </bean>
        
        下面部分采用的是c3p0连接池技术，性能在这个三个连接池中最差
		<bean id="dataSource"
			class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="driverClass" value="${mysql.driver}"/>
			<property name="jdbcUrl" value="${mysql.url}"/>
			<property name="user" value="${mysql.username}" />
			<property name="password" value="${mysql.password}" />
			<property name="acquireIncrement" value="5"></property>
		    <property name="initialPoolSize" value="10"></property>
		    <property name="minPoolSize" value="5"></property> 
		    <property name="maxPoolSize" value="20"></property>
		</bean>
	-->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	      <!-- 基本属性 driverClassName、url、user、password -->
	      <property name="driverClassName" value="${mysql.driver}"/>
	      <property name="url" value="${mysql.url}" />
	      <property name="username" value="${mysql.username}" />
	      <property name="password" value="${mysql.password}" />
	
	      <!-- 配置初始化大小、最小、最大 -->
	      <property name="initialSize" value="1" />
	      <property name="minIdle" value="1" /> 
	      <property name="maxActive" value="20" />
	
	      <!-- 配置获取连接等待超时的时间 -->
	      <property name="maxWait" value="60000" />
	
	      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	      <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	      <property name="minEvictableIdleTimeMillis" value="300000" />
	
	      <property name="validationQuery" value="SELECT 'x'" />
	      <property name="testWhileIdle" value="true" />
	      <property name="testOnBorrow" value="false" />
	      <property name="testOnReturn" value="false" />
	
	      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	      <property name="poolPreparedStatements" value="true" />
	      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	
	      <!-- 配置监控统计拦截的filters -->
	      <property name="filters" value="stat" /> 
    </bean>
	<!-- 
		mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源 MyBatis定义数据源,同意加载配置 
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <!-- 指定数据源，在上面的配置中已经指定，ref参数指定上面数据源的id -->
		<property name="dataSource" ref="dataSource" />
		
		<!-- 类型别名包，指定相应的entity类的名字，当有多个entity在不同的包中时，请依次使用value标签指出 -->
		<property name="typeAliasesPackage">
		  <value>com.uniplore.graph.ms.entity</value>
		</property>
		<!-- 
		     mapperLocations:它表示我们的Mapper文件存放的位置，当我们的Mapper文件跟对应的Mapper接口处于同一个位置的时候
		     我们可以不用指定该属性的值
		 -->
		<property name="mapperLocations">
		  <value>classpath:com/uniplore/graph/ms/mapper/*Mapper.xml</value>
		</property>
    </bean>
    
    <!--
        mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory 
		basePackage:指定sql映射文件/接口所在的包（自动扫描），当有新的mapper包需要被扫描时，
		在value属性中，使用,分割加入新的mapper即可 
 	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	
	    <!-- 指定基础包，即自动扫描某个包及其它的子包下的所有映射接口类 -->
		<property name="basePackage">
			<value>
				com.uniplore.graph.ms.mapper
			</value>
		</property>
		
		<!-- 指定sql会话工厂，在上面的配置中已经明确的指定过 -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>	
		
	<!-- 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源，在service层进行事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 使用声明式事务 transaction-manager：引用上面定义的事务管理器 -->
	<tx:annotation-driven transaction-manager="txManager" />	
	
	
	<mvc:annotation-driven>
		<!-- 消息转换器,解决@ResponseBody注解返回中文乱码问题 -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/plain;charset=UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 配置拦截器组，只放行允许公开访问的URL -->
<!-- 	 <mvc:interceptors> 
	  配置拦截器，并且拦截器可以配置多个，在拦截的过程中，顺序去执行拦截器中的内容 
	 <mvc:interceptor> 
		    /**拦截任意的路径，拦截器可以配置多个 
		    <mvc:mapping path="/**"/>
		     指定拦截器所在的类  
		    <bean class="com.uniplore.ms.action.interceptor.LoginInterceptor"></bean> 
		</mvc:interceptor> 
     </mvc:interceptors> 
 -->
<!-- 
    配置基于注解版本的映射器，默认采用的是3.1之前的版本
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
    
    配置基于注解版本的适配器，默认采用的是3.1之前的版本
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>
-->
	 
    <!-- 
        使用mvc的住注解驱动能够代替上面配置的基于注解版本的映射器和适配器
        mvc:annotation-driven默认加载了很多的参数的绑定方法，比如json转换的解析器就被注解驱动默认加载了
        实际开发使用该种方式
     -->
	<mvc:annotation-driven></mvc:annotation-driven>

    <!-- 
        配置自动扫描的包
        实际开发中建议使用组件扫描，此时可以扫描Controller、service、dao等等，只需要指定相应的包即可 
     -->
	<context:component-scan base-package="com.uniplore.graph" ></context:component-scan>
	
	
	<!-- 配置视图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
    
    <!-- 配置全局异常处理器 -->
    <bean class="com.uniplore.graph.ms.exception.HandlerException"></bean>

</beans>