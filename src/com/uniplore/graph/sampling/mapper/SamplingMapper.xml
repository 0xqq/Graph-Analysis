<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace :必须与对应接口全类名一致 id: 必须与对应接口的某个对应的方法名一致 -->

<mapper namespace="com.uniplore.graph.sampling.mapper.SamplingMapper">

    <resultMap type="com.uniplore.graph.sampling.entity.Nodes"
		id="nodeResult">
		<id column="id" property="id"/>  <!-- 主键 -->
		<result property="nodeName" column="node_name"/> <!-- 节点名字 -->
		<result property="nodeDegree" column="node_degree"/>  <!-- 节点的度 -->
		<result property="nodeState" column="node_state"/>  <!-- 节点状态 -->
	</resultMap>
	
	<resultMap type="com.uniplore.graph.sampling.entity.Edges" id="edgeResult">
	    <id column="id" property="id" />
	    <result property="sourceNodeID" column="source_node_id"/>
	    <result property="targetNodeID" column="target_node_id"/>
	    <result property="sourceNodeName" column="source_node_name"/>
	    <result property="targetNodeName" column="target_node_name"/>
	</resultMap>
	
	<resultMap type="com.uniplore.graph.sampling.entity.SamplingNodes" 
	    id="samplingNode"> 
	    <result property="id" column="id"/>
	    <result property="nodeName" column="node_name"/>
	</resultMap>
	
	<resultMap type="com.uniplore.graph.sampling.entity.SamplingEdges" 
	    id="samplingEdge">
        <result property="id" column="id"/>
	    <result property="sourceNodeID" column="source_node_id"/>
	    <result property="targetNodeID" column="target_node_id"/>
	    <result property="sourceNodeName" column="source_node_name"/>
	    <result property="targetNodeName" column="target_node_name"/>
	</resultMap>
	
	<!-- 查询点表中总数据量，并同时获取每一条记录 -->
	<select id="listNodeAllData" resultMap="nodeResult">
	    select * from node
	</select>
	
	<!-- 查询边表中总数据量，并同时获取每一条记录 -->
	<select id="listEdgeAllData" resultMap="edgeResult">
	    select * from edge
	</select>
	
	<!-- 随机抽取边表中的一条记录 -->
	<select id="selectOneEdge" resultMap="edgeResult" parameterType="java.lang.Integer">
	    select * from edge limit 1 offset #{nextInt}
	</select>
	
	<!-- 获取某个指定点的所有邻居点 -->
	<select id="getNeighbor" resultMap="edgeResult" parameterType="com.uniplore.graph.sampling.entity.Nodes">
	    select * from edge where source_node_id=#{id} or target_node_id=#{id}
	</select>
	
    <!-- 随机抽取点表中的一条记录 -->
    <select id="selectOneNode" resultMap="nodeResult" parameterType="Long">
        select * from node limit 1 offset #{nextLong}
    </select>
    
    <!-- 根据点的id获取当前点的完整信息，最关键的是获取当前节点的度信息 -->
    <select id="selectByID" resultMap="nodeResult" parameterType="java.lang.String"> 
        select * from node where id=#{id}
    </select>
    
    <!-- 根据执行的度返回相应的节点 -->
    <select id="selectHighDegree" parameterType="java.lang.Integer" resultMap="nodeResult">
        select * from node where node_degree=#{nodeDegree} limit 1
    </select>
    
    <!-- 查询所有的度较小的点 -->
    <select id="selectDegree" parameterType="java.lang.Integer" resultMap="nodeResult">
        select * from node where node_degree=#{nodeDegree}
    </select>
    
    <!-- 将抽样后的数据插入到抽样结果表中 -->
    <insert id="insertSamplingNode" parameterType="com.uniplore.graph.sampling.entity.SamplingNodes">
        insert into sampling_nodes(id,node_name) values(#{id},#{nodeName})
    </insert>
    
    <!-- 将抽样后的数据插入到抽样的结果表中 -->
    <insert id="insertSamplingEdge" parameterType="com.uniplore.graph.sampling.entity.SamplingEdges">
        insert into sampling_edges(id,source_node_id,source_node_name,target_node_id,target_node_name)
                         values(#{id},#{sourceNodeID},#{sourceNodeName},#{targetNodeID},#{targetNodeName})
    </insert>
    
    <!-- 清空抽样点表 -->
    <delete id="deleteSamplingNodes">
        delete from sampling_nodes
    </delete>
    
    <!-- 清空抽样边表 -->
    <delete id="deleteSamplingEdges">
        delete from sampling_edges
    </delete>
</mapper>