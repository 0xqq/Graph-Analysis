<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
    mapper所在的java类的全限定名，需要遵循下面五点规范：
    1. mapper.xml文件中namespace等于mapper接口的全限定名
    2. mapper.java接口中的方法名和mapper.xml中的sql语句的id一致
    3. mapper.java接口中的方法的输入参数类型和mapper.xml中的sql语句的parameterType类型一致
    4. mapper.java接口中的方法的返回值的类型和mapper.xml中的sql语句的resultType类型一致
    5. mapper.java每个方法都要抛出异常，这么做是为了做全局的异常管理
-->
<mapper namespace="com.uniplore.graph.ms.sign.mapper.UserMapper">
	
	<!-- 将entity与数据库中的admin表建立映射关系 -->
	<resultMap type="com.uniplore.graph.ms.sign.entity.UserPO" id="UserMap">
		<id property="id" column="id"/>
		<result property="email" column="email"/>
		<result property="userName" column="user_name"/>
		<result property="password" column="pwd"/>
		<result property="accountState" column="account_state"/>
		<result property="createTime" column="create_time"/>
		<result property="activeTime" column="active_time"/>
		<result property="activeCode" column="active_code"/>
		
	</resultMap>
	
	<!-- 保存用户信息到数据库中 -->
	<insert id="saveUserInfo" parameterType="com.uniplore.graph.ms.sign.entity.UserPO" >
	  insert into user(email,user_name,pwd,account_state,create_time,active_code) values(#{email},#{userName},#{password},#{accountState},#{createTime},#{activeCode});
	</insert>
	
	<!-- 查询出特定用户创建账户的时间 -->
	<select id="queryCreateTime" parameterType="String" resultType="Date">
	  select create_time from user where active_code=#{active_code}
	</select>
	
	<!-- 将激活时间插入到数据库中 -->
	<insert id="updateActiveTime" parameterType="com.uniplore.graph.ms.sign.entity.UserPO">
	  update user set active_time=#{activeTime},account_state=#{accountState} where id=#{id}
	</insert>
	
	<!-- 根据用户的激活码去找是否存在相应的id，防止用户随意修改激活码，恶意使用程序 -->
	<select id="queryIDbyActiveCode" parameterType="String" resultType="Integer">
	  select id from user where active_code=#{active_code}
	</select>
	
	<!-- 根据用户的id查询用户是否已经是激活状态 -->
	<select id="queryActiveTime" parameterType="Integer" resultType="Date">
	  select active_time from user where id=#{id}
	</select>
	
	<!-- 根据用户的id删除用户的信息 -->
	<delete id="deleteUserByID" parameterType="Integer">
	  delete from user where id=#{id}
	</delete>
	
	<!-- 根据用户名返回用户的ID -->
	<select id="queryUserExisted" parameterType="String" resultType="Integer">
	  select id from user where user_name=#{userName}
	</select>
	
	<!-- 根据用户的email返回用户的ID -->
	<select id="queryEmailExisted" parameterType="String" resultType="Integer">
	  select id from user where email=#{email}
	</select>
</mapper>

